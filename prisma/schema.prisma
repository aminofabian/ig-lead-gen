// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    relationMode = "prisma"

}
enum UserRole {
  ADMIN
  USER
  VERIFIED_USER
}
model User {
  id            String    @id @default(cuid())
  firstName          String?
  lastName          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password       String?
  role            UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean   @default(false)
  subscription      Subscription?
  integrations     Integration[]
  automations      Automation[]
 
  @@map("users")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model VerificationToken { 
id String @id @default(cuid())
email String
token String @unique
expires DateTime

@@unique([email, token])
}

model PasswordResetToken {
id String @id @default(cuid())
email String
token String @unique
expires DateTime

@@unique([email, token])

}

model Integration {
  id          String    @id @default(cuid())
  userId      String
  name        String    // e.g., "instagram", "reddit", "twitter"
  token       String
  expiresAt   DateTime?
  username    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  automations Automation[]

  @@unique([userId, name])
  @@map("integrations")
}

model Subscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  status             SubscriptionStatus
  priceId            String
  customerId         String?
  stripeSubscriptionId String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  features           Json      // Store enabled features for this subscription
  metadata           Json?     // Additional subscription metadata
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
  PAUSED
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String   // e.g., "Basic", "Pro", "Enterprise"
  description String
  priceId     String   @unique // Stripe price ID
  price       Int      // Price in cents
  currency    String   @default("usd")
  interval    String   // monthly, yearly
  features    Json     // List of features included in this plan
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    Json?    // Additional plan metadata

  @@map("subscription_plans")
}

model Automation {
  id            String    @id @default(cuid())
  userId        String
  integrationId String
  type          String    // dm, post, comment, etc.
  status        String    // active, paused, completed, failed
  config        Json      // Flexible configuration for different automation types
  stats         Json?     // Statistics and metrics
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastRunAt     DateTime?
  nextRunAt     DateTime?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  tasks         AutomationTask[]

  @@map("automations")
}

model AutomationTask {
  id            String    @id @default(cuid())
  automationId  String
  status        String    // pending, running, completed, failed
  result        Json?     // Task result data
  error         String?   // Error message if failed
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startedAt     DateTime?
  completedAt   DateTime?
  automation    Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@map("automation_tasks")
}
